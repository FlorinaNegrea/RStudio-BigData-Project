library(tidyverse)
library(modelr)
library(caret)
library(rsample)
library(corrplot)
library(modeldata)
library(patchwork)
library(klaR)
library(ggplot2)

wine_data <- read_csv("wine_quality.csv")

names(wine_data)[names(wine_data)== "fixed acidity"] <- "fixed_acidity"
names(wine_data)[names(wine_data)== "citric acid"] <- "citric_acid"
names(wine_data)[names(wine_data)== "residual sugar"] <- "residual_sugar"
names(wine_data)[names(wine_data)== "free sulfur dioxide"] <- "free_sulfur_dioxide"
names(wine_data)[names(wine_data)== "total sulfur dioxide"] <- "total_sulfur_dioxide"
names(wine_data)[names(wine_data)== "volatile acidity"] <- "volatile_acidity"

view(wine_data)


correlation_matrix <- cor(select_if(wine_data, is.numeric))

heatmap(correlation_matrix,
        col = colorRampPalette(c("skyblue", "white", "red"))(100),
        main = "Status correlationÂ matrix")


wine_data <- wine_data %>%
  mutate(quality = ifelse(quality < 6, "No", "Yes"))
wine_data <- wine_data %>% mutate(quality = factor(quality))

table()
view(wine_data)

## REGRESIA LOGISTICA ##

## Care sunt variabilele de interes ? ##

mod_all <- glm(data=wine_data, quality ~ ., family = binomial)
summary(mod_all)

mod_all_2 <- glm(data=wine_data, quality ~ residual_sugar + free_sulfur_dioxide +  density+ sulphates + volatile_acidity + pH + alcohol, family = binomial)
summary(mod_all_2)

#ALCOHOL
mod_alcohol <- glm(data = wine_data, quality ~ alcohol, family = binomial)
summary(mod_alcohol)   

alcohol_pred <- tribble(
  ~alcohol, 8, 12, 14, 16
)
alcohol_predicted <- predict(mod_alcohol, newdata = alcohol_pred, type="response")
alcohol_predicted

#VOLATILE_ACIDITY
mod_volatile_acidity <- glm(data = wine_data, quality ~ volatile_acidity, family = binomial)
summary(mod_volatile_acidity)

volatile_acidity_pred <- tribble(
  ~volatile_acidity, 0.1,0.5,0.8, 1, 1.5, 2
)
volatile_acidity_predicted <- predict(mod_volatile_acidity, newdata = volatile_acidity_pred, type="response")
volatile_acidity_predicted

#RESIDUAL_SUGAR
mod_residual_sugar <- glm(data = wine_data, quality ~ residual_sugar, family = binomial)
summary(mod_residual_sugar)

residual_sugar_pred <- tribble(
  ~residual_sugar , 1, 15, 45, 50, 70
)
residual_sugar_predicted <- predict(mod_residual_sugar, newdata = residual_sugar_pred, type="response")
residual_sugar_predicted


ggplot(wine_data, aes(x = alcohol, y = as.numeric(quality) - 1)) +
  geom_point() +
  geom_smooth(method = "glm", method.args = list(family = "binomial"), se = TRUE, color = "blue") +
  labs(title = "Logistic Regression - Alcohol vs Quality", x = "Alcohol", y = "Probability of High Quality") +
  theme_minimal()

ggplot(wine_data, aes(x = volatile_acidity, y = as.numeric(quality) - 1)) +
  geom_point() +
  geom_smooth(method = "glm", method.args = list(family = "binomial"), se = TRUE, color = "orange") +
  labs(title = "Logistic Regression - Volatile Acidity vs Quality", x = "Volatile Acidity", y = "Probability of High Quality") +
  theme_minimal()

ggplot(wine_data, aes(x = residual_sugar, y = as.numeric(quality) - 1)) +
  geom_point() +
  geom_smooth(method = "glm", method.args = list(family = "binomial"), se = TRUE, color = "green") +
  labs(title = "Logistic Regression - Residual Sugar vs Quality", x = "Residual Sugar", y = "Probability of High Quality") +
  theme_minimal()

#--------------------- TRAIN + TEST -------------------------------------------------------------------------------------
set.seed(123)
quality_split <- initial_split(wine_data, prop = 0.7, strata = "quality")
wine_train_reg <- training(quality_split)
wine_test_reg <- testing(quality_split)
table(wine_test_reg$quality) %>% prop.table()
table(wine_train_reg$quality) %>% prop.table()

features <- setdiff(names(wine_data), "quality")
x <- wine_train_reg[, features] 
y <- wine_train_reg$quality 

fitControl <- trainControl(
  method = "cv",
  number = 10 
)

### pe toate coloanele
model_GLM_all <-train(
  x=x,
  y=y,
  method = "glm",
  family = "binomial",
  trControl = fitControl  
)


model_GLM_all
confusionMatrix(model_GLM_all)
prediction_all = predict(model_GLM_all, newdata = wine_test_reg, type = "raw")
confusionMatrix(prediction_all, wine_test_reg$quality)

summary(model_GLM_all)

### doar pe coloanele de interes
x_selectat <- wine_train_reg[c("alcohol", "residual_sugar", "volatile_acidity")]

model_GLM_3 <-train(
  x=x_selectat,
  y=y,
  method = "glm",
  family = "binomial",
  trControl = fitControl  
)

model_GLM_3
confusionMatrix(model_GLM_3)
prediction_all = predict(model_GLM_3, newdata = wine_test_reg, type = "raw")
confusionMatrix(prediction_all, wine_test_reg$quality)

summary(model_GLM_3)

#### model pe ALCOHOL
x_selectat <- wine_train_reg[c("alcohol")]

model_GLM_alcohol <-train(
  x=x_selectat,
  y=y,
  method = "glm",
  family = "binomial",
  trControl = fitControl  
)

model_GLM_alcohol
confusionMatrix(model_GLM_alcohol)
prediction_alcohol = predict(model_GLM_alcohol, newdata = wine_test_reg, type = "raw")
confusionMatrix(prediction_alcohol, wine_test_reg$quality)

summary(model_GLM_alcohol)

#### model pe VOLATILE_ACIDITY
x_selectat <- wine_train_reg[c("volatile_acidity")]

model_GLM_volatile_acidity <-train(
  x=x_selectat,
  y=y,
  method = "glm",
  family = "binomial",
  trControl = fitControl  
)


model_GLM_volatile_acidity
confusionMatrix(model_GLM_volatile_acidity)
prediction_volatile_acidity = predict(model_GLM_volatile_acidity, newdata = wine_test_reg, type = "raw")
confusionMatrix(prediction_volatile_acidity, wine_test_reg$quality)

summary(model_GLM_volatile_acidity)

#### model pe residual_sugar
x_selectat <- wine_train_reg[c("residual_sugar")]

model_GLM_residual_sugar <-train(
  x=x_selectat,
  y=y,
  method = "glm",
  family = "binomial",
  trControl = fitControl  
)

model_GLM_residual_sugar
confusionMatrix(model_GLM_residual_sugar)
prediction_residual_sugar = predict(model_GLM_residual_sugar, newdata = wine_test_reg, type = "raw")
confusionMatrix(prediction_residual_sugar, wine_test_reg$quality)

summary(model_GLM_residual_sugar)



## NAIVE BAYES  ##

set.seed(123)

wine_split_nb <- initial_split(wine_data, prop = 0.7, strata = "quality")
wine_train_nb <- training(wine_split_nb) 
wine_test_nb  <- testing(wine_split_nb)  

table(wine_train_nb$quality)%>% prop.table()
table(wine_test_nb$quality)%>% prop.table() 

features <- setdiff(names(wine_train_nb), "quality") 
x <- wine_train_nb[,features]
y <- wine_train_nb$quality

fitControl <- trainControl( 
  method = "cv",
  number= 10
)

model_NB_all <- train(           
  x = x,                     
  y = y,                     
  method = "nb",               
  trControl = fitControl
)

model_NB_all
confusionMatrix(model_NB_all)


searchGrid <- expand.grid(
  usekernel = c(TRUE, FALSE),
  fL = 0.7,
  adjust = seq(0, 5, by = 1) 
)

model_NB_all_Search <- train(
  x = x,
  y = y,
  method = "nb",
  trControl = fitControl,
  tuneGrid = searchGrid 
)

model_NB_all_Search
confusionMatrix(model_NB_all_Search)

model_NB_all_Search$results %>%
  top_n(5, wt = Accuracy) %>%
  arrange(desc(Accuracy))

#predictii pe cel mai bun model

pred_NB <- predict(model_NB_all_Search, wine_test_nb) 
predProb_NB <- predict(model_NB_all_Search, wine_test_nb, type = "prob") 
confusionMatrix(pred_NB, wine_test_nb$quality) 


###model doar pe coloanele de interes

nrow(x_selectat)
length(y)

x_selectat <- wine_train_nb[c("alcohol", "residual_sugar", "volatile_acidity")]

model_NB_3 <- train(
  x = x_selectat,
  y = y,
  method = "nb",
  trControl = fitControl,
)

model_NB_3
confusionMatrix(model_NB_3)

searchGrid <- expand.grid(
  usekernel = c(TRUE, FALSE),
  fL = 0.4,
  adjust = seq(0, 5, by = 1) 
)

model_NB_3_Search <- train(
  x = x_selectat,
  y = y,
  method = "nb",
  trControl = fitControl,
  tuneGrid = searchGrid 
)


model_NB_3_Search
confusionMatrix(model_NB_3_Search)

#doresc sa vad primele modelele cele mai bune 
model_NB_3_Search$results %>%
  top_n(5, wt = Accuracy) %>%
  arrange(desc(Accuracy))

#predictii pe cel mai bun model

pred_NB <- predict(model_NB_3_Search, wine_test_nb) 
predProb_NB <- predict(model_NB_3_Search, wine_test_nb, type = "prob") 
confusionMatrix(pred_NB, wine_test_nb$quality) 

################################################

## ARBORI DE DECIZIE ####
library(rpart)
library(rpart.plot)
library(tidyverse)
library(rsample)
library(caret)
library(partykit)

set.seed(123)
wine_split <- initial_split(wine_data, prop = 0.7, strata = "quality")
wine_train_arb <- training(wine_split)
wine_test_arb <- testing(wine_split)
table(wine_train_arb$quality)
table(wine_test_arb$quality)

set.seed(123)

# 1 #---------- ARBORE NETAIAT

m1 = rpart(
  formula = quality ~. ,
  data = wine_train_arb, 
  method = "class",
  control = list(cp=0)
)
m1
summary(m1)
rpart.plot(m1)

pred_m1_train <- predict(m1, newdata = wine_train_arb, target ="class")
pred_m1_test <- predict(m1, newdata = wine_test_arb, target ="class")

pred_m1_train <- as_tibble(pred_m1_train) %>% mutate(class = ifelse(No >= Yes, "No", "Yes"))
pred_m1_test <- as_tibble(pred_m1_test) %>% mutate(class = ifelse(No >= Yes, "No", "Yes"))
table(pred_m1_train$class, wine_train_arb$quality)
table(pred_m1_test$class, wine_test_arb$quality)


confusionMatrix(factor(pred_m1_train$class), factor(wine_train_arb$quality))
confusionMatrix(factor(pred_m1_test$class), factor(wine_test_arb$quality))



# 2 #------------------- CP implicit (0.01)

m2 = rpart(
  formula = quality ~. ,
  data = wine_train_arb, 
  method = "class"
)
m2
summary(m2)
rpart.plot(m2)

pred_m2_train <- predict(m2, newdata = wine_train_arb, target ="class")
pred_m2_test <- predict(m2, newdata = wine_test_arb, target ="class")

pred_m2_train <- as_tibble(pred_m2_train) %>% mutate(class = ifelse(No >= Yes, "No", "Yes"))
pred_m2_test <- as_tibble(pred_m2_test) %>% mutate(class = ifelse(No >= Yes, "No", "Yes"))
table(pred_m1_train$class, wine_train_arb$quality)
table(pred_m1_test$class, wine_test_arb$quality)


confusionMatrix(factor(pred_m2_train$class), factor(wine_train_arb$quality))
confusionMatrix(factor(pred_m2_test$class), factor(wine_test_arb$quality))


# 3 #------------------- CP optim (0.0045)


m1_pruned <- prune(m1, cp=0.0045)
summary(m1_pruned)
rpart.plot(m1_pruned)

pred_m1_pruned_train <- predict(m1_pruned, newdata = wine_train_arb, target = "class")
pred_m1_pruned_test <- predict(m1_pruned, newdata = wine_test_arb, target = "class")

pred_m1_pruned_train <- as_tibble(pred_m1_pruned_train) %>% mutate(class = ifelse(No >= Yes, "No", "Yes"))
pred_m1_pruned_test <- as_tibble(pred_m1_pruned_test) %>% mutate(class = ifelse(No >= Yes, "No", "Yes"))

confusionMatrix(factor(pred_m1_pruned_train$class), factor(wine_train_arb$quality))
confusionMatrix(factor(pred_m1_pruned_test$class), factor(wine_test_arb$quality))


# 4 #------------------- BAGGING

library(ipred)
set.seed(123)
bagged_m1 <- bagging(quality ~ .,
                     data = wine_train_arb, coob = TRUE)
bagged_m1
summary(bagged_m1)

pred_bagged_m1_train <- predict(bagged_m1, newdata = wine_train_arb, target = "class")
pred_bagged_m1_test <- predict(bagged_m1, newdata = wine_test_arb, target = "class")

confusionMatrix(pred_bagged_m1_train, factor(wine_train_arb$quality))
confusionMatrix(pred_bagged_m1_test, factor(wine_test_arb$quality)) 


##########

library(pROC)
 ### pt NB ##
predProb_NB <- predict(model_NB_3_Search, wine_test_nb, type = "prob")

dataset_nb <- data.frame(
  actual.class_nb <- wine_test_nb$quality,
  probability_nb <- predProb_NB[,1]
)

roc_val_NB <- roc(actual.class_nb ~ probability_nb, dataset_nb)
roc_val_NB
roc_val_NB$specificities
roc_val_NB$sensitivities

cdf_nb <- data.frame(#fals positive pe axa X
  specificity_nb <- roc_val_NB$specificities, 
  sensitivity_nb <- roc_val_NB$sensitivities)

### pt GLM ##
predProb_reg <- predict(model_GLM_3, wine_test_reg, type = "prob")

dataset_reg <- data.frame(
  actual.class_reg <- wine_test_reg$quality,
  probability_reg <- predProb_reg[,1]
)

roc_val_reg <- roc(actual.class_reg ~ probability_reg, dataset_reg)
roc_val_reg
roc_val_reg$specificities

cdf_reg <- data.frame(
  specificity_reg <- roc_val_reg$specificities, 
  sensitivity_reg <- roc_val_reg$sensitivities)

### pt ARBORI ##
predProb_arb <- predict(bagged_m1, wine_test_arb, type = "prob")

dataset_arb<- data.frame(
  actual.class_arb <- wine_test_arb$quality,
  probability_arb <- predProb_arb[,1]
)

roc_val_arb <- roc(actual.class_arb ~ probability_arb, dataset_arb)
roc_val_arb
roc_val_arb$specificities

cdf_arb <- data.frame(
  specificity_arb <- roc_val_arb$specificities, 
  sensitivity_arb <- roc_val_arb$sensitivities)

ggplot() + 
  geom_line(data = cdf_nb, aes(x = specificity_nb, y = sensitivity_nb), color = "yellow", linewidth = 4 ) +
  geom_line(data = cdf_reg, aes(x = specificity_reg, y = sensitivity_reg), color = "red", linewidth = 2.5 ) +
  geom_line(data = cdf_arb, aes(x = specificity_arb, y = sensitivity_arb), color = "blue", linewidth = 2.5 ) +
  scale_x_reverse() +
  theme(text = element_text(size=20)) +
  xlab('Specificitate') + ylab('Senzitivitate')

